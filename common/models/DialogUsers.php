<?php
/**
 * Created by PhpStorm.
 * User: palad
 * Date: 19.07.2020
 * Time: 22:54
 */

namespace common\models;

use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use common\models\Message;

class DialogUsers extends ActiveRecord
{
    public function __construct(array $config = [])
    {
        parent::__construct($config);
    }


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%dialog_users}}';
    }

    public function fields()
    {
        $fields = parent::fields();

        return $fields;  // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    /**
     * {@inheritdoc}
     * sended: 0 - нет непрочитанных сообщений, 1 - есть непрочитанные, письмо неотправлено, 2 - письмо отправлено о непрочитанных
     */
    public function rules()
    {
        return [
            [['id', 'id_dialog', 'id_user', 'sended'], 'integer'],
        ];
    }

    public function attributeLabels()
    {
        return array(
            'id_dialog' => 'Диалог',
            'id_user' => 'Пользователь',
        );
    }

    public static function addUserToDialog($user_id, $dialog_id) {
        $dialogUser = new DialogUsers;
        $dialogUser->id_user = $user_id;
        $dialogUser->id_dialog = $dialog_id;
        $dialogUser->save();

        return $dialogUser->id;
    }

    public static function renewSendedLettersAboutUnreadMessages() {
        $senders = Message::find()->select('id_dialog, id_user')->distinct()
            ->where(['is_new' => 1]);


        $receivers = DialogUsers::find()->select('dialog_users.id_user, dialog_users.id_dialog, dialog_users.id')
            ->innerJoin(['m' => $senders], 'm.id_dialog = dialog_users.id_dialog AND NOT m.id_user = dialog_users.id_user AND dialog_users.sended = 0')
            //->addSelect(['m.id_user AS sender'])
            ->all();

        foreach ($receivers as $receiver){
            $DialogUsers = DialogUsers::findOne($receiver['id']);
            $DialogUsers->sended = 1;
            $DialogUsers->save();
        }

        return 1;
    }

    public static function getArrayOfUsersWithUnreadDialogs() {
        $unreadDialogs = DialogUsers::find()->select('id, id_user, id_dialog')
            ->where('sended = 1')->limit(10)->all();

        return $unreadDialogs;
    }

    public static function getAnotherUserInDialog($id_dialog, $id_user) {
        $anotherUser = DialogUsers::find()->select('id_user')
            ->where('id_dialog = '.$id_dialog.' AND id_user <> '.$id_user)->one();

        return $anotherUser;
    }

    public function setSended($sended = 2) {
        $this->sended = $sended;
        $this->save();

        return 1;
    }

}