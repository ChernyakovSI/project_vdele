<?php
/**
 * Created by PhpStorm.
 * User: palad
 * Date: 10.12.2020
 * Time: 10:37
 */

namespace common\models\fin;

use yii\db\ActiveRecord;
use Yii;
use yii\db\Query;
use common\models\fin\Account;

class Register extends ActiveRecord
{
    public static function tableName()
    {
        return '{{fin_register}}';
    }

    public function rules()
    {
        return [
            [['id', 'id_user', 'is_deleted', 'id_category',
                'id_subcategory', 'id_type', 'id_account', 'id_account_to'], 'integer'],
            [['created_at', 'updated_at', 'date'], 'integer'],
            ['sum', 'double'],
            [['comment'], 'safe'],
        ];
    }

    public function attributeLabels()
    {
        return array(
            'created_at' => 'Дата создания',
            'updated_at' => 'Дата изменения',
            'comment' => 'Примечание',
            'id_user' => 'Владелец',
            'is_deleted' => 'Скрыт',
            'id_category' => 'Категория',
            'id_subcategory' => 'Подкатегория',
            'date' => 'Дата',
            'id_type' => 'Тип движения',
            'id_account' => 'Счет',
            'id_account_to' => 'На счет',
            'sum' => 'Сумма',
            'isProfit' => 'Это доход'
        );
    }

    public function fields()
    {
        $fields = parent::fields();

        $fields['AccName'] = function ($model) {
            $AccName = '';//Account::getNameById($model->id_account);
            return $AccName;
        };

        return $fields;  // TODO: Change the autogenerated stub
    }

    /*public function extraFields()
    {
        //return ['AccName'];  // TODO: Change the autogenerated stub
    }*/

    public static function getAllRegsByUser($id_user, $beginDate = 0, $endDate = 0, $types = [], $option = []){
        $query = new Query();
        //++ 1-2-2-009 15/04/2022
        $body = $query->Select('Reg.`id` as id,
                                            Reg.`id_account` as id_account,
                                            Acc.`name` as AccName,
                                            Reg.`id_account_to` as id_account_to,
                                            AccTo.`name` as AccToName,
                                            Reg.`id_category` as id_category,
                                            Cat.`name` as CatName,
                                            
                                            Cat.`color` as CatColor,
                                            Cat.`isColored` as CatIsColored,
                                            
                                            Reg.`id_subcategory` as id_subcategory,
                                            Sub.`name` as SubName,
                                            
                                            Sub.`color` as SubColor,
                                            Sub.`isColored` as SubIsColored,
                                            
                                            Reg.`date` as date,
                                            Reg.`is_deleted` as is_deleted,
                                            Reg.`sum` as sum,
                                            Reg.`comment` as comment,
                                            Reg.`id_type` as id_type
                                            ')
            //-- 1-2-2-009 15/04/2022
            ->from(self::tableName().' as Reg')

            ->join('LEFT JOIN', Account::tableName().' as Acc', 'Acc.`id` = Reg.`id_account`')
            ->join('LEFT JOIN', Account::tableName().' as AccTo', 'AccTo.`id` = Reg.`id_account_to`')
            ->join('LEFT JOIN', Category::tableName().' as Cat', 'Cat.`id` = Reg.`id_category`')
            ->join('LEFT JOIN', Category::tableName().' as Sub', 'Sub.`id` = Reg.`id_subcategory`')

            ->where(['Reg.`id_user`' => $id_user, 'Reg.`is_deleted`' => 0]);

        if(count($types) > 0){
            $body = $body->andWhere('Reg.`id_type` IN ('.implode(',',$types).')');
        }else
        {
            $body = $body->andWhere('Reg.`id_type` = -1');
        }

        if ($beginDate > 0 || $endDate > 0){
            if ($beginDate > $endDate){
                $temp = $beginDate;
                $beginDate = $endDate;
                $endDate = $temp;
            }
            $body = $body->andWhere('Reg.`date` >= '.$beginDate)
                ->andWhere('Reg.`date` <= '.$endDate);
        }

        if(isset($option['selAccId']) && $option['selAccId'] > 0){
            $body = $body->andWhere(' (Reg.`id_account` = '.$option['selAccId']
                .' OR Reg.`id_account_to` = '.$option['selAccId'].') ');
//           $body = $body->andWhere(['OR',
//               [
//                   ['Reg.`id_account`' => $option['selAccId']],
//                   ['Reg.`id_account_to`' => $option['selAccId']]
//               ]]);
        }

        if(isset($option['selCatId']) && $option['selCatId'] > 0){
            $body = $body->andWhere(' Reg.`id_category` = '.$option['selCatId']);
        }

        if(isset($option['selSubId']) && $option['selSubId'] > 0){
            $body = $body->andWhere(' Reg.`id_subcategory` = '.$option['selSubId']);
        }

        $result = $body->orderBy('Reg.`date` DESC')->all();

        return $result;
    }

    public static function getRegById($id){
            $query = new Query();
            return $query->Select('Reg.`id` as id,
                                            Reg.`id_account` as id_account,
                                            Acc.`name` as AccName,
                                            Reg.`id_account_to` as id_account_to,
                                            AccTo.`name` as AccToName,
                                            Reg.`id_category` as id_category,
                                            Cat.`name` as CatName,
                                            Reg.`id_subcategory` as id_subcategory,
                                            Sub.`name` as SubName,
                                            Reg.`date` as date,
                                            Reg.`is_deleted` as is_deleted,
                                            Reg.`sum` as sum,
                                            Reg.`comment` as comment,
                                            Reg.`id_type` as id_type
                                            ')
                ->from(self::tableName().' as Reg')

                ->join('LEFT JOIN', Account::tableName().' as Acc', 'Acc.`id` = Reg.`id_account`')
                ->join('LEFT JOIN', Account::tableName().' as AccTo', 'AccTo.`id` = Reg.`id_account_to`')
                ->join('LEFT JOIN', Category::tableName().' as Cat', 'Cat.`id` = Reg.`id_category`')
                ->join('LEFT JOIN', Category::tableName().' as Sub', 'Sub.`id` = Reg.`id_subcategory`')
                ->where(['Reg.`id`' => $id])
                ->one();
    }

    public static function add($data){
        $newReg = new Register();

        $newReg->id_type = (integer)$data['id_type'];

        if($data['id_type'] != 2) {
            $newReg->id_category = (integer)$data['id_category'];
            $newReg->id_subcategory = (integer)$data['id_subcategory'];
        }
        else{
            $newReg->id_account_to = (integer)$data['id_account_to'];
        }

        $newReg->sum = (float)$data['sum'];
        $newReg->id_account = (integer)$data['id_account'];

        if(isset($data['date'])) {
            $newReg->date = (integer)$data['date'];
        }
        else{
            $newReg->date = time();
        };

        if(isset($data['created_at'])) {
            $newReg->created_at = (integer)$data['created_at'];
        }
        else{
            $newReg->created_at = time();
        };
        if(isset($data['updated_at'])) {
            $newReg->updated_at = (integer)$data['updated_at'];
        }
        else{
            $newReg->updated_at = time();
        };

        if(isset($data['id_user'])) {
            $newReg->id_user = (integer)$data['id_user'];
        }
        else{
            $id_user = Yii::$app->user->identity->getId();
            $newReg->id_user = $id_user;
        };

        if(isset($data['comment'])) {
            $newReg->comment = strip_tags($data['comment']);
        }
        else{
            $newReg->comment = '';
        };

        if(isset($data['is_deleted'])) {
            if($data['is_deleted'] == 'true'){
                $newReg->is_deleted = 1;
            }
            else if($data['is_deleted'] == 'false'){
                $newReg->is_deleted = 0;
            }
            else{
                $newReg->is_deleted = (integer)$data['is_deleted'];
            }
        };

        $newReg->save();

        //Обновление сумм счетов
        $Acc = Account::findOne($newReg->id_account);
        if($newReg->id_type == 1){
            $Acc->calculateAcc($newReg->sum);
        }
        else{
            $Acc->calculateAcc(-1 * $newReg->sum);
        };

        if($newReg->id_account_to > 0){
            $AccTo = Account::findOne($newReg->id_account_to);
            $AccTo->calculateAcc($newReg->sum);
        }

        return $newReg;
    }

    public static function edit($data, $id){
        $Reg = static::findOne(['id' => $id]);

        $lastSum = $Reg->sum;
        $lastAcc = $Reg->id_account;
        $lastType = $Reg->id_type;
        $lastAccTo = $Reg->id_account_to;

        $Reg->id_type = (integer)$data['id_type'];

        if($data['id_type'] != 2) {
            $Reg->id_category = (integer)$data['id_category'];
            $Reg->id_subcategory = (integer)$data['id_subcategory'];
        }
        else{
            $Reg->id_account_to = (integer)$data['id_account_to'];
        }

        $Reg->sum = (float)$data['sum'];
        $Reg->id_account = (integer)$data['id_account'];

        if(isset($data['date'])) {
            $Reg->date = (integer)$data['date'];
        }
        else{
            $Reg->date = time();
        };

        if(isset($data['updated_at'])) {
            $Reg->updated_at = (integer)$data['updated_at'];
        }
        else{
            $Reg->updated_at = time();
        };

        if(isset($data['comment'])) {
            $Reg->comment = strip_tags($data['comment']);
        }
        else{
            $Reg->comment = '';
        };

        if(isset($data['is_deleted'])) {
            if($data['is_deleted'] == 'true'){
                $Reg->is_deleted = 1;
            }
            else if($data['is_deleted'] == 'false'){
                $Reg->is_deleted = 0;
            }
            else{
                $Reg->is_deleted = (integer)$data['is_deleted'];
            }
        };

        $Reg->save();

        //Откат сумм счетов
        $Acc = Account::findOne($lastAcc);
        if($lastType == 1){
            $Acc->calculateAcc(-1 * $lastSum);
        }
        else{
            $Acc->calculateAcc($lastSum);
        };

        if($lastAccTo > 0){
            $AccTo = Account::findOne($lastAccTo);
            $AccTo->calculateAcc(-1 * $lastSum);
        }

        //Обновление сумм счетов
        $Acc = Account::findOne($Reg->id_account);
        if($Reg->id_type == 1){
            $Acc->calculateAcc($Reg->sum);
        }
        else{
            $Acc->calculateAcc(-1 * $Reg->sum);
        };

        if($Reg->id_account_to > 0){
            $AccTo = Account::findOne($Reg->id_account_to);
            $AccTo->calculateAcc($Reg->sum);
        }

        return $Reg;
    }

    public static function del($id){
        $Reg = static::findOne(['id' => $id]);

        $lastSum = $Reg->sum;
        $lastAcc = $Reg->id_account;
        $lastType = $Reg->id_type;
        $lastAccTo = $Reg->id_account_to;

        if(isset($data['updated_at'])) {
            $Reg->updated_at = (integer)$data['updated_at'];
        }
        else{
            $Reg->updated_at = time();
        };

        $Reg->is_deleted = 1;

        $Reg->save();

        //Откат сумм счетов
        $Acc = Account::findOne($lastAcc);
        if($lastType == 1){
            $Acc->calculateAcc(-1 * $lastSum);
        }
        else{
            $Acc->calculateAcc($lastSum);
        };

        if($lastAccTo > 0){
            $AccTo = Account::findOne($lastAccTo);
            $AccTo->calculateAcc(-1 * $lastSum);
        }

        return $Reg;
        //
    }

    public static function getAllRegsByFilter($id_user, $startDate, $finishDate){
        $query = new Query();
        $body = $query->Select(['Reg.`id` as id',
            'Reg.`date` as date',
            'Reg.`sum` as sum',
            'Reg.`id_type` as id_type',
        ])
            ->from(self::tableName().' as Reg');

        $strWhere = 'Reg.`id_user`= '.(integer)$id_user;
        $strWhere = $strWhere.' AND Reg.`is_deleted` = 0';
        $strWhere = $strWhere.' AND Reg.`id_type` < 2';
        $strWhere = $strWhere.' AND Reg.`date` >= '.(integer)$startDate;
        $strWhere = $strWhere.' AND Reg.`date` <= '.(integer)$finishDate;

        $body = $body->where($strWhere)->orderBy('Reg.`date`');

        return SELF::getArrayByDays($body->all());
    }

    public static function getArrayByDays($regs)
    {
        $result = [];

        $daySum[0] = 0;
        $daySum[1] = 0;

        for($i=1;$i<=31;$i++){
            $result[$i] = $daySum;
        }

        foreach ($regs as $reg) {
            $day = (integer)(date("d", $reg['date']));
            $daySum = $result[$day];

            if((integer)$reg['id_type'] === 0) {
                $daySum[0] = $daySum[0] + $reg['sum'];
            } else {
                $daySum[1] = $daySum[1] + $reg['sum'];
            }

            $result[$day] = $daySum;
        }

        return $result;
    }

}