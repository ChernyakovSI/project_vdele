<?php
/**
 * Created by PhpStorm.
 * User: palad
 * Date: 19.07.2020
 * Time: 22:54
 */

namespace common\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\ActiveQuery;


/**
 * User model
 *
 * @property integer $id
 * @property string $text
 * @property integer $id_dialog
 * @property integer $id_user
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $is_new
 * @property integer $is_deleted
 */
class Message extends ActiveRecord
{

    public function __construct(array $config = [])
    {
        parent::__construct($config);
    }


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{message}}';
    }

    public function fields()
    {
        $fields = parent::fields();

        $fields['name'] = function ($model) {
            $user_id = Yii::$app->user->identity->getId();

            if ($model->id_user == $user_id){
                $name = 'Я:';
            }
            else{
                $name = User::getI($model->id_user).':';
                }
           return $name;
        };

        return $fields;  // TODO: Change the autogenerated stub
    }

    /*public function extraFields()
    {
        return ['name'];
    }*/

    /**
     * {@inheritdoc}
     */
    //public function behaviors()
    //{
    //    return [
    //        TimestampBehavior::className(),
    //    ];
    //}

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id', 'created_at', 'updated_at', 'id_dialog', 'id_user'], 'integer'],
            [['text'], 'safe'],
        ];
    }

    public function attributeLabels()
    {
        return array(
            'text' => 'Сообщение',
            'id_dialog' => 'Диалог',
            'id_user' => 'Автор',
        );
    }

    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'id_user']);
    }

    /**
     * @param int $id_dialog
     * @return ActiveQuery
     */
    public static function findMessages($id_dialog) {
        //return self::findAll(['id_dialog' => $id_dialog]);
        //return self::findAll(['id_dialog' => $id_dialog]);
        return self::find()->where(['id_dialog' => $id_dialog])->orderBy('created_at desc');
    }

    public static function getSetOfMessages($id_dialog, $limit, $offset, $user_id) {
        $messages = self::find()->where(['id_dialog' => $id_dialog, 'is_deleted' => false])->orderBy('created_at desc')
            ->limit($limit)->offset($limit*$offset)->all();

        foreach($messages as $message){
            if($message->id_user != $user_id){
                $message->is_new = 0;
                $message->save();
            }
        }

        return $messages;
    }

    public function addMessage($data) {

        $this->id_dialog = (int)$data['id_dialog'];
        $this->text = $data['text'];

        if(isset($data['id_user'])) {
            $this->id_user = $data['id_user'];
        }
        else{
            $this->id_user = Yii::$app->user->identity->getId();
        };

        if(isset($data['created_at'])) {
            $this->created_at = $data['created_at'];
        }
        else{
            $this->created_at = time();
        };

        $this->is_new = 1;

        $this->save();

        return $this->id;
    }

    public function deleteMessage() {

        $this->is_deleted = !($this->is_deleted);

        $this->save();

        return $this->id;
    }

    public static function GetQuantityOfUnreadDialogs($id_user) {
        $OpenedDialogs = DialogUsers::find()->select('id_dialog')->where(['id_user' => $id_user])->all();

        return self::find()->select('id_dialog')->distinct()
            ->where(['is_new' => 1, 'id_dialog' => $OpenedDialogs])
            ->andWhere(['!=', 'id_user', $id_user])->count();
    }

    public static function GetQuantityOfUnreadMessages($id_user, $id_user2) {
        $dialog_id = Dialog::getDialogByUser($id_user, $id_user2, 0);

        return self::find()->select('id')->distinct()
            ->where(['is_new' => 1, 'id_dialog' => $dialog_id])
            ->andWhere(['!=', 'id_user', $id_user])->count();
    }

}